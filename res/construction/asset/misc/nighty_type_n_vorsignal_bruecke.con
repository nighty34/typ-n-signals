local builder = require "nightfury/signals/type_n_builder"
local param_builder = require "nightfury/signals/type_n_param_builder"
local utils = require "nightfury/signals/type_n_utils"


function data()

return { 
	params = param_builder.pre_bridge_params(false),
	type = "ASSET_TRACK",
	description = {
		name = _("nighty_type_n_vorsignal_bruecke_name"),			
		description = _("nighty_type_n_vorsignal_bruecke_desc"),
	},
	availability = {
		yearFrom = 1986		
	},
	skipOnInit = true,
	categories = { "nighty_typ_n", "better_signals" },
	skipCollision = true,
	autoRemovable = false,
	order = 34340,
	
	updateFn = function(params)
		local result = {}
		result.models = {}

		local addToTable = utils.addToTable


		-- Determine signalComponents
		local hasSpeedIndicator = (params.nighty_type_n_speedindicator and params.nighty_type_n_speedindicator == 1)
		local hasIdSign = (params.nighty_type_n_id_sign and params.nighty_type_n_id_sign == 1)
		local signalType = nil

		local y_offset = 0
		local z_offset = 2.75
		local x_offset = builder.calc_x_offset(.25, params.better_signals_x_offset)
		

		if (params.better_signals_y_offset) then
			y_offset = builder.set_y_offset(y_offset, params.better_signals_y_offset)
		end

		if params.nighty_type_n_signaltype then
			signalType = builder.eval_pre_signal_type(params.nighty_type_n_signaltype)
		end

		local evaluatedSignal = builder.evaluateMainSignal(params)

		
		-- ==[Model definition]==

		-- Build Form
		if params.nighty_type_n_build_form and (params.nighty_type_n_build_form == 0) then
			result.models[#result.models+1] = { id = "nighty/signals/typ-n_schirm_alt_pre.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
		elseif params.nighty_type_n_build_form and (params.nighty_type_n_build_form == 1) then
			result.models[#result.models+1] = { id = "nighty/signals/typ-n_schirm_brugg_pre.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
		else 
			result.models[#result.models+1] = { id = "nighty/signals/typ-n_schirm_rappi_pre.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
		end

		if params.nighty_type_n_worker_platform and (params.nighty_type_n_worker_platform == 1) then
			result.models[#result.models+1] = { id = "nighty/signals/typ-n_worker_platform.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
		end
		
		-- Mast
		if params.nighty_type_n_korb and (params.nighty_type_n_korb == 0) then
			result.models[#result.models+1] = { id = "nighty/signals/typ-n_mast_bruecke.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
			if (params.nighty_type_n_id_sign and params.nighty_type_n_id_sign == 2) then
				result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_sign_nuber_without.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset-.3, y_offset, z_offset-1.9, 1 }}
			end
		elseif params.nighty_type_n_korb and (params.nighty_type_n_korb == 1) then
			result.models[#result.models+1] = { id = "nighty/signals/typ-n_mast_bruecke.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
			result.models[#result.models+1] = { id = "nighty/signals/typ-n_mast_addon_korb.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
			if (params.nighty_type_n_id_sign and params.nighty_type_n_id_sign == 2) then
				result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_sign_nuber_without.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset-.3, y_offset, z_offset-1.9, 1 }}
			end
		elseif params.nighty_type_n_korb and (params.nighty_type_n_korb == 2) then
			result.models[#result.models+1] = { id="railroad/sbb_l_signalkorb/sbb_l_signalkorb.mdl", transf = { -1, 0, 0, 0, -0, -1, 0, 0, 0, 0, 1, 0, x_offset-.1, y_offset+2.5, z_offset-2.25, 1 }}
			if (params.nighty_type_n_id_sign and params.nighty_type_n_id_sign == 2) then
				result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_sign_nuber_without.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset+.23, y_offset, z_offset-1.9, 1 }}
			end
		end

		-- signs
		if signalType == "repeat" then
			if hasIdSign then
				result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_sign_nuber.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset + .35, 1 }}
			end
			
			if evaluatedSignal.canIndicateSpeed then
				evaluatedSignal.indicatesNextSpeed = true
			end

			evaluatedSignal.displayOccupied = false
			evaluatedSignal.displayWarning = false

			result.models[#result.models+1] = { id = "nighty/signals/typ-n_sign_repeat.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
		elseif signalType == "preStationSignal" then
			if hasIdSign then
				result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_sign_nuber.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset + .7, 1 }}
			end
			result.models[#result.models+1] = { id = "nighty/signals/typ-n-station_pre.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
		else
			if hasIdSign then
				result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_sign_nuber.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
			end
		end

		if evaluatedSignal.canIndicateSpeed then
			evaluatedSignal.indicatesNextSpeed = true
		end

		addToTable(result.models, builder.buildSignalLamps(false, evaluatedSignal.isGreen, evaluatedSignal.displayWarning, evaluatedSignal.displayOccupied, evaluatedSignal.indicatesNextSpeed, evaluatedSignal.nextStopSignalDistance, x_offset, y_offset, z_offset))


		-- Speed indicator
		if hasSpeedIndicator then
			addToTable(result.models, builder.buildSpeedIndicator(evaluatedSignal.isGreen, evaluatedSignal.canIndicateSpeed, evaluatedSignal.indicatedSpeed, evaluatedSignal.displayWarning, evaluatedSignal.displayOccupied, x_offset, y_offset, z_offset))
		end
		
		result.cost = -1
		result.maintenanceCost = result.cost / 6

		result.terrainAlignmentLists = {
			{
				type = "LESS",
				faces = { { { .1, -.1, 0 }, { -.1, -.1, 0 }, { -.1, .1, 0 } , { .1, .1, 0 } } },
				slopeLow = 0,
				slopeHigh = 0,
				optional = true,
			},
		}
		
		
		result.groundFaces = {
			{  
				face = { { -1, -1, 0 }, { 1, -1, 0 }, { 1, 1, 0 } },
				modes = {
					{
						type = "FILL",               
						key = "industry_floor.lua"
					}
				},
				loop = true,
				alignmentOffsetMode = "OBJECT",
				alignmentDirMode = "OBJECT",
				alignmentOffset = { -2.0, -1.0 },

			},
		}

		if params.better_signals_tunnel_helper and params.better_signals_tunnel_helper == 1 then
			result.models[#result.models+1] = { id = "tunnel_helper_arrow.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, z_offset, 1 }}

			result.groundFaces[#result.groundFaces + 1] = {
				face = { { -50, -50, 0 }, { 50, -50, 0 }, { 50, 50, 0 }, { -50, 50, 0 } },
				modes = {
					{
						type = "FILL",               
						key = "hole.lua"
					}
				},
				loop = true,
				alignmentOffsetMode = "OBJECT",
				alignmentDirMode = "OBJECT",
				alignmentOffset = { -2.0, -1.0 },
			} 
		end
		
		return result
	end
}
end