local builder = require "nightfury/signals/type_n_builder"
local param_builder = require "nightfury/signals/type_n_param_builder"
function data()

return { 
	params = param_builder.main_signal_params(),
	type = "ASSET_TRACK",
	description = {
		name = _("nighty_type_n_hauptsignal_name"),			
		description = _("nighty_type_n_hauptsignal_desc"),
	},
	availability = {
		yearFrom = 1986,
	},
	skipOnInit = true,
	categories = { "nighty_typ_n" },
	skipCollision = true,
	autoRemovable = false,
	order = 34340,
	
	updateFn = function(params)
		local result = {}
		result.models = {}


		-- Determine signalComponents
		local isGreen = (params.signal_state and params.signal_state == 1)
		local hasSpeedIndicator = (params.nighty_type_n_speedindicator and params.nighty_type_n_speedindicator == 1)
		local displayWarning = (params.nighty_type_n_shorten_block and params.nighty_type_n_shorten_block == 1)
		local displayOccupied = (params.nighty_type_n_occupied and params.nighty_type_n_occupied == 1)
		local hasIdSign = (params.nighty_type_n_id_sign and params.nighty_type_n_id_sign == 1)
		local signalType = nil
		local maxSpeed = 160
		local indicatedSpeed = maxSpeed + 1
		local canIndicateSpeed = true
		local indicatesNextSpeed = false

		local x_offset = builder.calc_x_offset(0, params.better_signals_x_offset)
		local z_offset = .5
		local y_offset = 0

		if (params.signal_speed) then
			indicatedSpeed = params.signal_speed
		end

		if params.paramsOverride then
			if params.paramsOverride.occupied then
				displayOccupied = params.paramsOverride.occupied == 1
			end

			if params.paramsOverride.warning then
				displayWarning = params.paramsOverride.warning == 1
			end

			if params.paramsOverride.speed then
				indicatedSpeed = params.paramsOverride.speed
				params.showSpeedChange = true
			end
		end

		if (params.better_signals_y_offset) then
			y_offset = builder.set_y_offset(y_offset, params.better_signals_y_offset)
		end

		if params.nighty_type_n_signaltype then
			signalType = builder.eval_main_signal_type(params.nighty_type_n_signaltype)
		end

		-- Evaluate future signals
		local nextStopSignalDistance = 10 -- choosen high TODO: (dirty code)

		if params.following_signal then
			if params.following_signal.signal_state == 0 then
				nextStopSignalDistance = 1
			elseif params.following_signal.following_signal and (params.following_signal.following_signal.signal_state == 0) then
				nextStopSignalDistance = 2
			end

			if params.following_signal.signal_speed then
				local followingSignalSpeed = params.following_signal.signal_speed
				if (math.floor(followingSignalSpeed/10)*10 < math.floor(indicatedSpeed/10)*10) then
					indicatesNextSpeed = true
					indicatedSpeed = math.floor((followingSignalSpeed+1)/10)*10
				elseif params.previous_speed and (((math.floor(params.previous_speed/10)*10 < math.floor(indicatedSpeed/10)*10) or (math.floor(params.previous_speed/10)*10 > math.floor(indicatedSpeed/10)*10))) then
					canIndicateSpeed = true
					indicatesNextSpeed = false
					indicatedSpeed = math.floor((indicatedSpeed+1)/10)*10
				else
					canIndicateSpeed = false
				end

				if (params.previous_speed and (math.floor((params.previous_speed)/10) == math.floor((indicatedSpeed+1)/10))) or not params.showSpeedChange then
					canIndicateSpeed = false
				end
			end
		else
			indicatesNextSpeed = false
		end
		
		if nextStopSignalDistance == 1 then
			canIndicateSpeed = false
		elseif displayWarning and nextStopSignalDistance == 2 then
			canIndicateSpeed = false
		elseif displayOccupied and nextStopSignalDistance == 1 then
			canIndicateSpeed = false
		end

		
		-- ==[Model definition]==

		-- Build Form
		if params.nighty_type_n_build_form and (params.nighty_type_n_build_form == 0) then
			result.models[#result.models+1] = { id = "nighty/signals/typ-n_schirm_alt_main.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
		elseif params.nighty_type_n_build_form and (params.nighty_type_n_build_form == 1) then
			result.models[#result.models+1] = { id = "nighty/signals/typ-n_schirm_brugg_main.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
		else 
			result.models[#result.models+1] = { id = "nighty/signals/typ-n_schirm_rappi_main.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
		end
		
		-- Mast
		if params.nighty_type_n_mast and (params.nighty_type_n_mast == 0) then
			result.models[#result.models+1] = { id = "nighty/signals/typ-n_mast_basic.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}

			if params.nighty_type_n_mast_addon and (params.nighty_type_n_mast_addon == 1) then
				result.models[#result.models+1] = { id = "nighty/signals/typ-n_mast_addon_leiter.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
			elseif params.nighty_type_n_mast_addon and (params.nighty_type_n_mast_addon == 2) then
				result.models[#result.models+1] = { id = "nighty/signals/typ-n_mast_addon_korb.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
			elseif params.nighty_type_n_mast_addon and (params.nighty_type_n_mast_addon == 3) then
				result.models[#result.models+1] = { id = "nighty/signals/typ-n_mast_addon_korb.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
				result.models[#result.models+1] = { id = "nighty/signals/typ-n_mast_addon_leiter.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
			end

		elseif params.nighty_type_n_mast and (params.nighty_type_n_mast == 1) then
			result.models[#result.models+1] = { id = "nighty/signals/typ-n_mast_versetzt_mirrored.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}

			if params.nighty_type_n_mast_addon and (params.nighty_type_n_mast_addon == 1) then
				result.models[#result.models+1] = { id = "nighty/signals/typ-n_mast_addon_leiter_versetzt.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset + 1.25, z_offset, 1 }}
			elseif params.nighty_type_n_mast_addon and (params.nighty_type_n_mast_addon == 2) then
				result.models[#result.models+1] = { id = "nighty/signals/typ-n_mast_addon_korb.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
			elseif params.nighty_type_n_mast_addon and (params.nighty_type_n_mast_addon == 3) then
				result.models[#result.models+1] = { id = "nighty/signals/typ-n_mast_addon_korb.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
				result.models[#result.models+1] = { id = "nighty/signals/typ-n_mast_addon_leiter_versetzt.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset + 1.25, z_offset, 1 }}
			end
		else
			result.models[#result.models+1] = { id = "nighty/signals/typ-n_mast_versetzt.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}

			if params.nighty_type_n_mast_addon and (params.nighty_type_n_mast_addon == 1) then
				result.models[#result.models+1] = { id = "nighty/signals/typ-n_mast_addon_leiter_versetzt.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
			elseif params.nighty_type_n_mast_addon and (params.nighty_type_n_mast_addon == 2) then
				result.models[#result.models+1] = { id = "nighty/signals/typ-n_mast_addon_korb.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
			elseif params.nighty_type_n_mast_addon and (params.nighty_type_n_mast_addon == 3) then
				result.models[#result.models+1] = { id = "nighty/signals/typ-n_mast_addon_korb.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
				result.models[#result.models+1] = { id = "nighty/signals/typ-n_mast_addon_leiter_versetzt.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
			end
		end
		
		-- Sings
		if signalType == "entrySignal" then
			if hasIdSign then
				result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_sign_nuber.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset + .35, 1 }}
			end
			result.models[#result.models+1] = { id = "nighty/signals/typ-n_station_entry.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
		elseif signalType == "exitSignal" then
			if hasIdSign then
				result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_sign_nuber.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset + .35, 1 }}
			end
			result.models[#result.models+1] = { id = "nighty/signals/typ-n_station_exit.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
		elseif signalType == "preStationSignal" then
			if hasIdSign then
				result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_sign_nuber.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset + .7, 1 }}
			end
			result.models[#result.models+1] = { id = "nighty/signals/typ-n-station_pre.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
		elseif signalType == "shuntingStop" then
			if hasIdSign then
				result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_sign_nuber.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
			end

			if hasSpeedIndicator then
				result.models[#result.models+1] = { id = "nighty/signals/typ-n-sign_shunting.mdl", transf = {1, 0, 0, 0, 0, -1, -8.7422776573476e-08, 0, 0, 8.7422776573476e-08, -1, 0, x_offset-0.15, y_offset, z_offset + 9.25, 1, }}
			else
				result.models[#result.models+1] = { id = "nighty/signals/typ-n-sign_shunting.mdl", transf = {1, 0, 0, 0, 0, -1, -8.7422776573476e-08, 0, 0, 8.7422776573476e-08, -1, 0, x_offset, y_offset, z_offset + 9.95, 1, }}
			end
		elseif signalType == "entryNexit" then
			if hasIdSign then
				result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_sign_nuber.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset + .70, 1 }}
			end
			result.models[#result.models+1] = { id = "nighty/signals/typ-n_station_entry_n_exit.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
		else
			if hasIdSign then
				result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_sign_nuber.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
			end
		end
		
		-- signal lamps
		if not isGreen then -- red
			result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_red.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
		elseif (nextStopSignalDistance == 1) or (hasSpeedIndicator and ((indicatesNextSpeed and (maxSpeed >= indicatedSpeed)) or (displayWarning and (nextStopSignalDistance == 2)) or (displayOccupied and (nextStopSignalDistance == 1)))) then
			result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_yellow.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
		else -- green
			result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_green.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
		end


		-- Speed indicator
		if hasSpeedIndicator then 
			result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_speedindicator.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
			if isGreen and canIndicateSpeed then
				if indicatedSpeed <= 40 then
					result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_speed_40.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
				
				elseif indicatedSpeed <= 50 then
					result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_speed_50.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
				
				elseif indicatedSpeed <= 60 then
					result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_speed_60.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
				
				elseif indicatedSpeed <= 70 then
					result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_speed_70.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
				
				elseif indicatedSpeed <= 80 then
					result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_speed_80.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
				
				elseif indicatedSpeed <= 90 then
					result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_speed_90.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
				
				elseif indicatedSpeed <= 100 then
					result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_speed_100.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
				
				elseif indicatedSpeed <= 110 then
					result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_speed_110.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
				
				elseif indicatedSpeed <= 120 then
					result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_speed_120.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}

				elseif indicatedSpeed <= 130 then
					result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_speed_130.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
				
				elseif indicatedSpeed <= 140 then
					result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_speed_140.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}

				elseif indicatedSpeed <= 150 then
					result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_speed_150.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}

				elseif indicatedSpeed <= 160 then
					result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_speed_160.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
				end
			elseif isGreen then
				if displayWarning and nextStopSignalDistance == 2 then
					result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_speed_v.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
				elseif displayOccupied and nextStopSignalDistance == 1 then
					result.models[#result.models+1] = { id = "nighty/signals/typ-n_base_speed_occupied.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x_offset, y_offset, z_offset, 1 }}
				end
			end
		end
		
		result.cost = -1
		result.maintenanceCost = result.cost / 6

		result.terrainAlignmentLists = {
			{
				type = "LESS",
				faces = { { { .1, -.1, 0 }, { -.1, -.1, 0 }, { -.1, .1, 0 } , { .1, .1, 0 } } },
				slopeLow = 0,
				slopeHigh = 0,
				optional = true,
			},
		}
		
		
		result.groundFaces = {
			{  
				face = { { -1, -1, 0 }, { 1, -1, 0 }, { 1, 1, 0 } },
				modes = {
					{
						type = "FILL",               
						key = "industry_floor.lua"
					}
				},
				loop = true,
				alignmentOffsetMode = "OBJECT",
				alignmentDirMode = "OBJECT",
				alignmentOffset = { -2.0, -1.0 },

			},
		}

		if params.better_signals_tunnel_helper and params.better_signals_tunnel_helper == 1 then
			result.models[#result.models+1] = { id = "tunnel_helper_arrow.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, z_offset, 1 }}

			result.groundFaces[#result.groundFaces + 1] = {
				face = { { -50, -50, 0 }, { 50, -50, 0 }, { 50, 50, 0 }, { -50, 50, 0 } },
				modes = {
					{
						type = "FILL",               
						key = "hole.lua"
					}
				},
				loop = true,
				alignmentOffsetMode = "OBJECT",
				alignmentDirMode = "OBJECT",
				alignmentOffset = { -2.0, -1.0 },
			} 
		end
		
		return result
	end
}
end